{"version":3,"sources":["components/SudokuSolver.js","sudoku/sudoku.js","components/SudokuField.js","components/Timer.js","components/Result.js","components/SudokuBoard.js","components/GridOptions.js","App.js","reportWebVitals.js","index.js"],"names":["deepCopy","arr","copy","forEach","elem","Array","isArray","push","isError","solution","row","col","unavailable","length","fill","i","topleftx","Math","floor","toplefty","j","solveSudoku","grid","start","Date","count","countdir","boardsize","alert","create_grid","userGenerated","result","rows","time","solved","solveByAlgo","cols","index","value","readonly","given","correct","zero","top_left","top_mid","top_right","top_right_end","mid_left","mid_right_end","bottom_left","bottom_mid","bottom_right","bottom_right_end","generateSudoku","text","temp_grid","String","replace","split","map","el","parseInt","every","splice","handleChange","e","field","onChange","temp","target","SudokuField","props","style","color","className","readOnly","Timer","useState","timerStart","prevPause","elapsed","isActive","timeInfo","setTimeInfo","updateTime","useEffect","interval","setInterval","prevState","clearInterval","marginBottom","onClick","time2","Result","sudoku","resetBoard","SudokuBoard","GridOptions","fileUploadHandler","selectedFile","fileName","fileUploaded","onClickHandler","reset","handleReset","handleUserGrid","userSudoku","userSudokuSolvable","MIN_GRID_VALUES","display","type","id","accept","htmlFor","App","useRef","userSudokuValues","setUserSudoku","userSudokuSolution","setUserSudokuSolution","setSudoku","setReset","setSelectedFile","setFileName","setFileUploaded","current","event","e_row","e_col","file","files","fileReader","FileReader","readAsText","name","onloadend","content","s","input","repeat","isNaN","g","candidate","checkSolution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cd0984c.chunk.js","sourcesContent":["//Create deep copy of n-dimensional array (recursively call function)\nconst deepCopy = (arr) => {\n    let copy = [];\n    arr.forEach(elem => {\n      if(Array.isArray(elem)){\n        copy.push(deepCopy(elem))\n      }else{\n        copy.push(elem)\n      }\n    })\n    return copy;\n}\n\n//Check if current grid (param solution) has no errors based on the value at row,col\nfunction isError(solution, row, col) {\n    let unavailable = new Array(solution[0].length+1).fill(false); //declare as length plus 1 since possible sudoku values are 1-9 (ignore 0 index)\n\n    //handle left-right check (traverse the columns of the row)\n    for (let i=0;i<solution[0].length;i++) {\n        if (unavailable[solution[row][i]] && solution[row][i]!==0) {//while traversing, if there is a value that is repeated (other than 0)...\n            return true; //return true (meaning that there is an error)\n        }\n        unavailable[solution[row][i]] = true; //if the value is still available (meaning the if statement is false), make it unavailable\n    }\n    \n    unavailable = new Array(solution[0].length+1).fill(false); \n    \n    //handle up-down check (traverse rows of the column)\n    for (let i=0; i<solution.length; i++) { \n        if (unavailable[solution[i][col]] && solution[i][col]!==0){ //if a non-zero value is repeated...\n            return true; //return true (error)\n        }\n        unavailable[solution[i][col]] = true;\n    }\n    \n    unavailable = new Array(solution[0].length+1).fill(false);\n    \n    //check 3x3 boxees\n    let topleftx = Math.floor(col/3)*3; //utilize flooring to always start at top left corner of each 3x3 square of the grid\n    let toplefty = Math.floor(row/3)*3;\n    for (let i = 0; i<3; i++) {\n        for (let j = 0; j<3; j++) { //nested for to traverse the 3x3 square and check for error\n            if (unavailable[solution[topleftx+i][toplefty+j]] && solution[topleftx+i][toplefty+j]!==0){\n                return true;\n            }\n            unavailable[solution[topleftx+i][toplefty+j]] = true;\n        }\n    }\n    \n    return false; //if everything is satisfied and there is no error, return false.\n}\n\n//Brute force sudoku solver. \n//Iterate through grid and increment each position until an error is found\n//Backtrack to try different values for previous grid positions until error is fixed\nexport function solveSudoku(grid) {\n    let start = new Date();\n    //copy of original grid to do solution\n    let solution = deepCopy(grid);\n    \n    //variable initialization\n    let count = 0;\n    let countdir = 1; //determines direction to move when iterating (so if there is an error you start moving back and not forward)\n    let boardsize = grid.length; \n    \n    //while end of board not yet reached\n    while(count<(boardsize*boardsize)){\n        //Sudoku not solvable if iterator moves before the first position\n        if (count === -1){\n            //alert('Sudoku not solvable')\n            //break;\n            return null;\n        }\n\n        //Timeout if sudoku takes too long to solve (7 seconds)\n        if ((new Date() - start)/1000 > 7){\n            alert('Timeout');\n            return null;\n        }\n\n        //determines row,col position on board\n        let row = Math.floor(count/boardsize);\n        let col = count%boardsize;\n\n        //Increment/decrement count if current space is occupied (skipping over the preset values of the grid)\n        if(grid[row][col] !== 0 && countdir === 1){\n            count++;\n        }\n        else if (grid[row][col] !== 0 && countdir === -1){\n            count--;\n        }\n        else {\n            solution[row][col]++; //increase the value of empty space by one and perform check (remember starts at 0)\n\t\t\t\t\n            if(solution[row][col] > boardsize){ // if the value is greater than boardsize (9) then one of the previous values must be wrong so...\n                solution[row][col] = 0; // we reset it to 0...\n                count--; // ...move one index back on the board...\n                countdir = -1; // ... and we set countdir to -1 to start incrementing backwards \n            }\n            else if(!isError(solution, row, col)){ //method checks to see if the value is valid on the solution board\n                count++; // if there is no error, then we can move onto the next index...\n                countdir = 1; // and make sure countdir is 1 so we move in the right direction\n            }\n            //The current row,col has an error, keep incrementing the current position until it exceeds 9\n        }\n    }\n\n    return solution;\n}","import {solveSudoku} from '../components/SudokuSolver'\n\n//Creates sudoku grid (2d array structure to handle logic). Parameters allow to pass in a premade solution as well as boolean for usergenerated\nexport function create_grid(grid, userGenerated, solution = null) {\n  const result = { \n    rows: [], \n    solution : !userGenerated ? solveSudoku(grid) : solution ? solution : null,\n    time: 0,\n    solved: false,\n    solveByAlgo: false\n  };\n\n  //Create 9x9 grid and pass grid values into results[rows]\n  for (let i=0; i<9; ++i){\n    const row = { cols : [], index : i}\n    for(let j=0; j<9; ++j){\n      const value = grid[i][j];\n      const readonly = (!userGenerated || solution) && value !== 0;\n      const col = {\n        row: i,\n        col: j,\n        value: value,\n        readonly: readonly,\n        \n        given : readonly, //want to initialize given and readOnly separately because readonly will get updated when sudoku is solved\n        correct : false,\n        zero : false,\n\n        top_left : i%3===0 && j%3===0,\n        top_mid : i%3===0 && j%3===1,\n        top_right : i%3===0 && j%3===2 && j!==8,\n        top_right_end: i%3===0 && j===8,\n\n        mid_left : (i%3===1 && j%3===0) || (i%3===2 && j%3===0 && i!==8),\n        mid_right_end : (i%3===1 && j===8) || (i%3===2 && j===8 && i!==8),\n\n        bottom_left : i===8 && j%3===0,\n        bottom_mid : i===8 && j%3===1,\n        bottom_right : i===8 && j%3===2 && j!==8,\n        bottom_right_end : i===8 && j===8,\n      };\n      row.cols.push(col);\n    }\n    result.rows.push(row);\n  }\n  return result;\n}\n\n//Takes string (from text file) and converts to 2d grid to pass into create sudoku grid function\nexport function generateSudoku(text, userGenerated = false) {\n  \n  let temp_grid = String(text).replace(/\\s/g, '').split(\"\"); //splits elements by space\n  temp_grid = temp_grid.map(el => parseInt(el));\n  \n  if (temp_grid.length === 81 && temp_grid.every(el => el < 10 && el >= 0)){    \n    const grid = [];\n    while (temp_grid.length) grid.push(temp_grid.splice(0,9));\n    /*\n    const grid = [ \n      [ 0, 0, 9, 2, 0, 0, 0, 0, 3 ],\n      [ 0, 7, 0, 0, 8, 0, 0, 6, 0 ],\n      [ 3, 0, 0, 0, 0, 9, 7, 0, 0 ],\n      [ 5, 0, 0, 0, 0, 2, 4, 0, 0 ],\n      [ 0, 1, 0, 0, 3, 0, 0, 5, 0 ],\n      [ 0, 0, 3, 7, 0, 0, 0, 0, 2 ],\n      [ 0, 0, 5, 8, 0, 0, 0, 0, 1 ],\n      [ 0, 2, 0, 0, 7, 0, 0, 9, 0 ],\n      [ 6, 0, 0, 0, 0, 4, 3, 0, 0 ],\n    ];*/\n    \n    return create_grid(grid, userGenerated);\n  }\n  \n  return false;\n}\n\n//Check if current state of sudoku matches solution\nexport function checkSolution(sudoku, e) {\n  let candidate = sudoku.rows.map((row) => row.cols.map((col) => col.value));\n  candidate[e.row][e.col] = e.value;\n\n  for (let i=0; i<candidate[0].length; i++){\n    for(let j=0; j<candidate.length; j++ )\n      if(candidate[i][j] === 0 || candidate[i][j] !== sudoku.solution[i][j]){\n        return false;\n      }\n  }\n  return true\n}\n\n\n  ","import React from 'react';\n\n//Pass value down to handle change function\nfunction handleChange(e, field, onChange) {\n    const temp = e.target.value.length;\n    const value = e.value === \"\" ? null : parseInt(e.target.value[temp-1], 10); //Only gets the 1 integer value so no need to worry about maxlength\n    onChange({...field, value : value});\n};\n\n//Format the grid fields \nexport function SudokuField(props) {\n    const {field, solved, onChange} = props;\n\n    //style by if field is given, sudoku is solved, and field is correct\n    const style = field.given ? {color:'#222'} : solved ? field.zero ? {color:\"#008CBA\"} : field.correct ? {color:'#32CD32'} : {color:'#FF0000'} : {}; \n\n    //Add className to style bolded outlines on grid\n    if(field.top_left){\n        return (\n            <input \n                className = \"field top_left\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.top_mid){\n        return (\n            <input \n                className = \"field top_mid\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.top_right){\n        return (\n            <input \n                className = \"field top_right\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.top_right_end){\n        return (\n            <input \n                className = \"field top_right_end\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.mid_left){\n        return (\n            <input \n                className = \"field mid_left\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.mid_right_end){\n        return (\n            <input \n                className = \"field mid_right_end\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.bottom_left){\n        return (\n            <input \n                className = \"field bottom_left\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.bottom_mid){\n        return (\n            <input \n                className = \"field bottom_mid\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.bottom_right){\n        return (\n            <input \n                className = \"field bottom_right\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    else if(field.bottom_right_end){\n        return (\n            <input \n                className = \"field bottom_right_end\" \n                //maxLength = '1'\n                value = {field.value || \"\"} \n                readOnly={field.readonly}\n                style = {style}\n                onChange={(e) => handleChange(e, field, onChange)}\n            />\n        )\n    }\n    return (\n        <input \n            className = \"field\" \n            //maxLength = '1'\n            value = {field.value || \"\"} \n            readOnly={field.readonly}\n            style = {style}\n            onChange={(e) => handleChange(e, field, onChange)}\n        />\n    );\n}","import React, { useEffect, useState } from 'react';\n\nexport function Timer(props) {\n\n    const [timeInfo, setTimeInfo] = useState({timerStart:new Date(), prevPause: 0, elapsed: 0, isActive: false})\n    const {time, updateTime} = props;\n\n    //Logic for pause/unpausing \n    const toggle = () => {\n        let temp = timeInfo.isActive\n        setTimeInfo(prevState => {return {...prevState, isActive:!temp}}); //update pause/start\n        if(temp){ //if previously active (ie: now paused)\n            let time = (new Date() - timeInfo.timerStart + timeInfo.prevPause); //time active in milliseconds\n            let time2 = Math.floor(time/1000); //time active in seconds\n            setTimeInfo(prevState => {return{...prevState, prevPause:time, elapsed:time2}}); //update the time of pause and current time to display (in seconds)\n            updateTime(time2); //update time to display in results (need to pass time info up props)\n        }\n        else{\n            setTimeInfo(prevState => {return{...prevState, timerStart: new Date()}}); //continue counting on the timer\n        }\n    }\n\n    //Reset timer\n    const reset = () => {\n        setTimeInfo(prevState => {return{...prevState, elapsed:0, prevPause:0, isActive:false}});\n        updateTime(0);\n    }\n\n    //Call whenever time, updatetime, or timeinfo updated\n    useEffect( () => {\n        let interval = null;\n        if(timeInfo.isActive) {\n            //Count if timer is active -- keep track of elapsed time on the cycle\n            interval = setInterval( () => {\n                let time = Math.floor((new Date() - timeInfo.timerStart + timeInfo.prevPause)/1000);\n                setTimeInfo(prevState => {return{...prevState, elapsed:time}});\n                updateTime(time);\n            }, 10);\n        }\n        /*\n        else if (!timeInfo.isActive && timeInfo.elapsed !==0){\n            clearInterval(interval);\n        }*/\n        //stops the timer if isActive changes\n        return () => clearInterval(interval)\n    }, [time, updateTime, timeInfo]);\n\n\n    /*\n    const resetStyle = {\n        opacity: timeInfo.elapsed === 0 ? '0.6' : '1', \n        cursor: timeInfo.elapsed === 0 ? 'not-allowed' : 'pointer'\n    };\n    */\n    \n    return (\n        <div>\n            <h2>Time: {timeInfo.elapsed}s </h2>\n            <div className=\"row\" style = {{marginBottom: \"5px\"}}>\n                <button className={`button button-primary-${timeInfo.isActive ? 'active' : 'inactive'}`} onClick={toggle}> {/* 2nd class name not used and can be deleted */}\n                    {timeInfo.isActive ? 'Pause' : 'Start'}\n                </button>\n\n                &nbsp;&nbsp;&nbsp;\n\n                <span className={timeInfo.elapsed===0 ? 'not-allowed' : ''}>\n                    <button className={timeInfo.elapsed===0 ? 'button unclickable' : 'button'} onClick={reset}>\n                        Reset\n                    </button>\n                </span>\n\n            </div>\n        </div>\n    );\n\n}","import React from 'react';\n\nexport function Result(props) {\n    const {sudoku, resetBoard} = props;\n    const elapsed = (sudoku.time);\n\n    return (\n        <div>\n            {sudoku.solveByAlgo ? <h2>Sudoku solved via algorithm, {elapsed} seconds</h2> : <h2>Sudoku solved in {elapsed} seconds</h2>}\n            <button className=\"button\" style = {{marginBottom: \"5px\"}} onClick={resetBoard}>Reset</button>\n        </div>\n\n    )\n}\n\n","import React from 'react';\nimport {SudokuField} from \"./SudokuField\";\nimport {Timer} from \"./Timer\";\nimport {Result} from \"./Result\";\n\nexport function SudokuBoard(props) {\n    const {sudoku, onChange, updateTime, resetBoard} = props;\n\n    //cannot render objects... must break down to smallest components\n    return (\n        <div>\n            {!sudoku.solved && updateTime && <Timer time = {sudoku.time} updateTime = {updateTime} />}\n            {sudoku.solved && <Result sudoku = {sudoku} resetBoard = {resetBoard} />}\n            \n            {sudoku.length !== 0 && sudoku.rows && sudoku.rows.map(row => (\n                    <div className = 'row' key = {row.index}>\n                        {row.cols.map(field => (\n                            <SudokuField field = {field} key={field.col} solved={sudoku.solved} onChange = {onChange}/>\n                        ))}\n                    </div>\n                )\n                )}\n        </div>\n    );\n}","import React from 'react';\n\nexport function GridOptions(props) {\n    \n    const {fileUploadHandler, \n        selectedFile, \n        fileName,\n        fileUploaded, \n        onClickHandler,\n        reset,\n        handleReset,\n        handleUserGrid,\n        userSudoku,\n        userSudokuSolvable,\n        MIN_GRID_VALUES,\n        count} = props;\n\n    return (\n        <div className = 'grid-options'>\n            {reset && !userSudoku && <div>\n                {selectedFile !== null && !fileUploaded && <div style={{display:'inline'}}>\n                    <button className=\"button\" onClick = {handleReset}> Back to Options </button> \n                    &nbsp;&nbsp;&nbsp;\n                </div>}\n                <input type=\"file\" className = \"input-file\" id=\"file\" accept = \".txt\" onChange={fileUploadHandler}/>\n                <label className = \"button\" htmlFor=\"file\">Upload a sudoku grid</label>\n                &nbsp;&nbsp;&nbsp;\n                {selectedFile !== null && !fileUploaded && <button type=\"button\" className=\"button\" onClick={onClickHandler}>Upload</button>}\n                {selectedFile === null && <button className=\"button\" onClick = {() => handleUserGrid('create')}> Create Grid </button>}\n            </div>}\n            {fileName && !fileUploaded && <p style = {{display:'inline-block'}}>{fileName}</p> }\n            {!reset && <button className='button' onClick = {handleReset}>New Grid</button>}\n            {userSudoku && <div style = {{marginBottom: '15px'}}>\n                {count < MIN_GRID_VALUES ? <h2>Add More Values</h2> : !userSudokuSolvable ? <h2>Invalid Sudoku Grid</h2>: \"\"}\n                <button className=\"button\" onClick = {handleReset}> Back to Options </button>\n                &nbsp;&nbsp;&nbsp;\n                <button className=\"button\" onClick = {() => handleUserGrid('reset')}> Reset Board </button>\n                &nbsp;&nbsp;&nbsp;\n                <span className={!userSudokuSolvable ? \"not-allowed\":\"\"}>\n                    <button className={!userSudokuSolvable ? \"button unclickable\":\"button\"} onClick = {() => handleUserGrid('upload')}> \n                        Upload \n                    </button>\n                </span>\n                \n            </div>}\n            \n            \n      </div>\n    );\n}\n","import { useEffect, useState, useRef } from 'react';\nimport {generateSudoku, checkSolution, create_grid} from './sudoku/sudoku';\nimport {SudokuBoard} from './components/SudokuBoard';\nimport './App.css';\nimport { GridOptions } from './components/GridOptions';\nimport {solveSudoku } from './components/SudokuSolver';\n\n\n//Min number of values for user-created grid\nconst MIN_GRID_VALUES = 17;\n\nfunction App() {\n  //For managing user sudoku\n  const grid = useRef([]); //Used to correctly update count of elements on grid\n  const userSudokuValues = useRef(0); //Count of elements on grid\n  const [userSudoku, setUserSudoku] = useState([]);\n  const [userSudokuSolution, setUserSudokuSolution] = useState([]);\n  //Normal sudoku related states\n  const [sudoku, setSudoku] = useState([]);\n  const [reset, setReset] = useState(true);\n  //File upload\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [fileUploaded, setFileUploaded] = useState(false);\n\n  /*\n  //run only once on render\n  useEffect( () => {\n  }, []);\n  */\n\n  //Update time continuously in case sudoku gets solved\n  const updateTime = (elapsed) => {\n    //time not nested in state so can update sudoku state like this\n    setSudoku(prevState => {\n      return{...prevState, time : elapsed}\n    })\n  }\n\n  //Reset board after solving\n  const resetBoard = () => {\n    if(selectedFile){\n      setSudoku(generateSudoku(selectedFile));\n    }\n    else if (userSudokuSolution && grid){\n      setSudoku(create_grid(grid.current, true, userSudokuSolution));\n    }\n    else{\n      alert('Error Resetting the grid');\n    }\n  }\n\n  //Updates the board after user input\n  const handleChange = (e) => {    \n    e.value = isNaN(e.value) ? 0 : e.value;\n\n    //https://blog.logrocket.com/a-guide-to-usestate-in-react-ecb9952e406c/#howtoupdatestateinanestedobjectinreactwithhooks\n    //Nested objects must be updated like this\n    //We create an additional item in the state object {...all_the_other_propertyies, sudoku : {value : new_value } } but this is neccessary since we need to do multiple nests\n    setSudoku(prevState => ({\n      ...prevState,     //copies the previous values of sudoku\n      sudoku: {         //recreate the object that contains the field to update\n        //...prevState.sudoku,  //copy all the fields of the object <- only required if there are other fields in the nested object\n        value: prevState.rows[e.row].cols[e.col].value = e.value, //overwrite the value of the field to update\n        //and assignment operator in \"prevState.rows[e.row].cols[e.col].value = e.value\" immediately updates the value of the grid in state\n        //if console.log(sudoku) at the bottom of this function, the grid will show the immediate value while the sudoku : {value:new_value} will be one iteration behind\n      }\n    }));\n    if(!sudoku.solved){\n      const solved = checkSolution(sudoku, e);\n      if (solved){\n        setSudoku(prevState => ({\n          ...prevState,\n          solved:true,\n          sudoku: {\n            value: prevState.rows.forEach((row) => row.cols.forEach((col) => {\n              if(col.readonly === false) {\n                col.readonly=true;\n                col.correct = true;\n              }\n            }))\n          }\n        }));          \n      }\n    }\n    //console.log(sudoku);\n  }\n\n\n  //Updates user board while creating new grid\n  const handleUserChange = (e) => {\n    e.value = isNaN(e.value) ? 0 : e.value;\n\n    let g = [];\n    for(let i =0; i<userSudoku.rows.length; ++i){\n      const arr = [];\n      for(let j = 0; j<userSudoku.rows[0].cols.length; j++){\n        arr.push(userSudoku.rows[i].cols[j].value);\n      }\n      g.push(arr);\n    }\n    grid.current = g;\n\n    setUserSudoku(prevState => ({\n      ...prevState,     \n      event: {\n        value: prevState.rows[e.row].cols[e.col].value = e.value, \n        e_row: e.row,\n        e_col : e.col\n      }\n    }));\n  }\n\n  // whenever new value is added to grid\n  useEffect(() => {\n    if(userSudoku.rows && grid.current.length > 0 && userSudoku.event){\n      //Update the number of elements in the grid\n      //Need to account for changing/spamming the same value in the same space <-- only increment / decrement count if below conditions are true\n      const updateCount = (grid.current[userSudoku.event.e_row][userSudoku.event.e_col] === userSudoku.event.value) || \n                          (grid.current[userSudoku.event.e_row][userSudoku.event.e_col] > 0 && userSudoku.event.value !== 0) ? false : true;\n      \n      if(updateCount){\n        if(userSudoku.event.value !== 0){\n          userSudokuValues.current += 1;\n        }\n        else{\n          userSudokuValues.current -= 1;\n        }\n      }\n\n      //Only allow user to submit sudoku if exceeds min amount\n      if(userSudokuValues.current >= MIN_GRID_VALUES){\n        grid.current[userSudoku.event.e_row][userSudoku.event.e_col] = userSudoku.event.value; //Must update grid.current before trying solution\n        let solution = solveSudoku(grid.current);\n        if(solution){\n          setUserSudokuSolution(solution);\n        }\n        else{\n          setUserSudokuSolution([]);\n        } \n      }\n      else{\n        setUserSudokuSolution([]);\n      } \n      \n    }\n  }, [userSudoku]);\n  \n\n  //Solve sudoku when solve button pressed\n  const solveSudokuGrid = () => {\n    if(sudoku.solution !== null){\n      setSudoku(prevState => ({\n        ...prevState,\n        sudoku: {\n          value: prevState.rows.forEach((row) => row.cols.forEach((col) => { //Traverse through each grid space and set to readonly and set properties (ie: readOnly and colour of text)\n            if(col.readonly === false) {\n              const temp = col.value;\n              col.value = prevState.solution[col.row][col.col];\n              col.readonly=true;\n              col.correct = prevState.solution[col.row][col.col] === temp;\n              col.zero = temp === 0;\n            }\n          }))\n        },\n        solved:true, \n        solveByAlgo:true\n      }))\n    }\n    else{ //Code should never reach here but just in case\n      setSudoku(prevState => ({\n        ...prevState,\n        solved:true,\n        sudoku: {\n          value: prevState.rows.forEach((row) => row.cols.forEach((col) => {\n            col.value = -1\n            col.correct = false;\n            col.readonly = true;\n          }))\n        }\n      }))\n    }\n  }\n\n  //Handle file upload\n  const fileUploadHandler = (e) => {\n    const file = e.target.files[0];\n    let fileReader = new FileReader();\n    try{\n      fileReader.readAsText(file);\n      setFileName(file.name);\n    }\n    catch{}\n    fileReader.onloadend = (e) => {\n      const content = e.target.result;\n      setSelectedFile(content);\n    }\n  }\n\n  //Handles when user clicks 'Upload' for file upload\n  const onClickHandler = () => {  \n    if(selectedFile !== null){\n      let s = generateSudoku(selectedFile);\n      if(s){\n        setSudoku(s);\n        setFileUploaded(true);\n        setReset(false);\n      }\n      else{\n        alert('Please upload a valid sudoku grid')\n      }\n    }\n  }\n\n  //Handle when user wants to create new board\n  const handleUserReset = () => {\n    setReset(true);\n    setSelectedFile(null);\n    setFileName(null);\n    setFileUploaded(false);\n    setUserSudoku([]);\n    userSudokuValues.current = 0;\n    setUserSudokuSolution([]);\n  }\n\n  //Handles user grid actions (create/reset, upload)\n  const handleUserGrid = (input) => {\n    if(input === 'create' || input === 'reset') {\n      const temp_grid = '0'.repeat(81); //Create an array of 0s so that the user can insert the values they want\n      const sudoku = generateSudoku(temp_grid, true);\n      setUserSudoku(sudoku);\n      userSudokuValues.current = 0;\n    }\n    else if (input === 'upload'){\n      setSudoku(create_grid(grid.current, true, userSudokuSolution));\n      setFileUploaded(true);\n      setReset(false);\n      setUserSudoku([]);\n    }\n  }\n\n  return (\n    <div className=\"App\" style = {{marginBottom : \"60px\"}}>\n      <header className={!fileUploaded || !(sudoku.solution === null && selectedFile) ? \"App-header\" : \"App-header fail\"}>\n        {!fileUploaded || !(sudoku.solution === null && selectedFile) ? <h1>Sudoku Solver</h1> :<h1>Not Solvable</h1>  }\n      </header> \n      \n      <GridOptions \n        fileUploadHandler = {fileUploadHandler} \n        selectedFile = {selectedFile} \n        fileName = {fileName}\n        fileUploaded = {fileUploaded} \n        onClickHandler={onClickHandler}\n        reset = {reset}\n        handleReset = {handleUserReset}\n        handleUserGrid = {handleUserGrid}\n        userSudoku = {userSudoku.length !== 0}\n        userSudokuSolvable = {userSudokuSolution.length !== 0}\n        MIN_GRID_VALUES = {MIN_GRID_VALUES}\n        count = {userSudokuValues.current}\n      />\n      {userSudoku.length !== 0 && <SudokuBoard sudoku = {userSudoku} onChange = {handleUserChange}/>}\n      {(selectedFile !== null || userSudokuSolution) && fileUploaded && <SudokuBoard sudoku = {sudoku} onChange={handleChange} updateTime={updateTime} resetBoard = {resetBoard}/>} \n      <span className={sudoku.solution === null ? 'not-allowed' : ''}>\n        {(selectedFile !== null || userSudokuSolution) && fileUploaded && !sudoku.solved && \n          <button className={sudoku.solution === null ? 'solve_sudoku button unclickable' : 'solve_sudoku button'} onClick={solveSudokuGrid}>Solve</button>\n        }         \n      </span>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}